/*
## Triangle
* @include triangle within a pseudo element and add positioning properties (ie. top, left)
* $direction: up, down, left, right
*/
@mixin triangle($direction, $size: 8px, $color: #222) {
    content: "";
    display: block;
    position: absolute;
    height: 0;
    width: 0;
    @if ($direction == "up") {
        border-bottom: $size solid $color;
        border-left: $size solid transparent;
        border-right: $size solid transparent;
    } @else if ($direction == "down") {
        border-top: $size solid $color;
        border-left: $size solid transparent;
        border-right: $size solid transparent;
    } @else if ($direction == "left") {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-right: $size solid $color;
    } @else if ($direction == "right") {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-left: $size solid $color;
    }
}

/*
* Currency
*/
%currency {
    position: relative;
    &:before {
        content: "$";
        position: relative;
        left: 0;
    }
}
.USD %currency:before {
    content: "$";
}
.EUR %currency:before {
    content: "\20AC";
} // must escape the html entities for each currency symbol
.ILS %currency:before {
    content: "\20AA";
}
.GBP %currency:before {
    content: "\00A3";
}

/*
* Respond To
*/
// Breakpoints for each query
$smartphone: 480px;
$tabletPortrait: 767px;
$tabletLandscape: 1024px;
$desktop: 1174px;
$largeScreen: 1400px;
@mixin respondTo($media) {
    @if $media == smartphone {
        @media (max-width: $smartphone) {
            @content;
        }
    } @else if $media == tablet {
        @media (min-width: $tabletPortrait) and (max-width: $tabletLandscape) {
            @content;
        }
    } @else if $media == smallScreen {
        @media (max-width: $desktop) {
            @content;
        }
    } @else if $media == desktop {
        @media (min-width: $desktop) {
            @content;
        }
    }
}

/*
* Animation
*/
@mixin animation(
    $name,
    $duration: 1000ms,
    $iterations: infinite,
    $timing-function: ease,
    $delay: 0ms
) {
    // There is a FF bug that requires all time values to have units, even 0 !!!!!!
    -webkit-animation: $name $duration $iterations $timing-function $delay;
    -moz-animation: $name $duration $iterations $timing-function $delay;
    -o-animation: $name $duration $iterations $timing-function $delay;
    animation: $name $duration $iterations $timing-function $delay;
}

/*
* Alerted: creates a smooth, pulsing circle next to any element that the mixin is applied to.
*/
@-webkit-keyframes alertMe {
    from {
        border-width: 3px;
        border-color: gold;
    }
    to {
        border-width: 0;
        border-color: rgba(gold, 0.1);
    }
}
@-moz-keyframes alertMe {
    from {
        border-width: 3px;
        border-color: gold;
    }
    to {
        border-width: 0;
        border-color: rgba(gold, 0.1);
    }
}
@keyframes alertMe {
    from {
        border-width: 3px;
        border-color: gold;
    }
    to {
        border-width: 0;
        border-color: rgba(gold, 0.1);
    }
}
@mixin alerted() {
    &:before {
        content: "";
        @include absolute(top 6px right 6px);
        height: 8px;
        width: 8px;
        border-radius: 10px;
        background-color: gold;
    }
    &:after {
        content: "";
        @include absolute(top 0 right 0);
        height: 20px;
        width: 20px;
        border-radius: 20px;
        background-color: transparent;
        border: solid gold;
        border-width: 2px; // animates
        box-sizing: border-box;
        @include animation($name: alertMe);
    }
}
