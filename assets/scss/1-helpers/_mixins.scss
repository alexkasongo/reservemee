/*
* Typography
*/

// An rem font-size mixin providing fallback to px
@mixin font-size($sizeValue: 1.4) {
    $remValue: $sizeValue;
    $pxValue: ($sizeValue * 10);
    font-size: #{$pxValue}px;
    font-size: #{$remValue}rem;
}

// Requires inline-block or block for proper styling
@mixin text-truncate {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

/*
* Transforms
*/
@mixin transform($arguments...) {
    -webkit-transform: $arguments;
    -ms-transform: $arguments; // IE9
    transform: $arguments;
}

@mixin transform-origin($arguments...) {
    -webkit-transform-origin: $arguments;
    -ms-transform-origin: $arguments; // IE9
    transform-origin: $arguments;
}

@mixin rotate($arguments...) {
    -webkit-transform: rotate($arguments);
    -ms-transform: rotate($arguments); // IE9
    transform: rotate($arguments);
}

@mixin backface-visibility($arguments) {
    -webkit-backface-visibility: $arguments;
    -moz-backface-visibility: $arguments;
    -ms-backface-visibility: $arguments;
    -o-backface-visibility: $arguments;
    backface-visibility: $arguments;
}

/*
* Animations
*/
@mixin transition($arguments...) {
    -webkit-transition: $arguments;
    transition: $arguments;
}

@mixin animation($arguments) {
    -webkit-animation: $arguments;
    animation: $arguments;
}

/*
* Gradients
*/
@mixin linear-gradient($from, $to) {
    background-color: $from;
    background-image: -webkit-linear-gradient(
        left,
        $from,
        $to
    ); /* Chrome 10-25, iOS 5+, Safari 5.1+ */
    background-image: linear-gradient(
        to right,
        $from,
        $to
    ); /* Chrome 26, Firefox 16+, IE 10+, Opera 12.10+ */
}

/*
* Structure
*/
@mixin box-sizing($arguments) {
    -webkit-box-sizing: $arguments;
    -moz-box-sizing: $arguments;
    -o-box-sizing: $arguments;
    box-sizing: $arguments;
}

//============================================================
// Push auto - quickly centre a block element without
// having to worry about if there is any top or
// bottom margin already applied.
//============================================================

@mixin push--auto {
    margin: {
        left: auto;
        right: auto;
    }
}

//============================================================
// Pseudo - When using ::before and ::after you'll always
// need these three, so we're saving two lines of code every
// time you use this.
/*
* div::after {
    @include pseudo;
    top: -1rem; left: -1rem;
    width: 1rem; height: 1rem;
}
*/
//============================================================

@mixin pseudo($display: block, $pos: absolute, $content: "") {
    content: $content;
    display: $display;
    position: $pos;
}

//============================================================
// Placeholders - They're a pain as you have to set the style
// in all the separate formats, this sorts it for you.
/*
* input,  
textarea {  
    @include input-placeholder {
        color: $grey;
    }
}
*/
//============================================================
@mixin input-placeholder {
    &.placeholder {
        @content;
    }
    &:-moz-placeholder {
        @content;
    }
    &::-moz-placeholder {
        @content;
    }
    &:-ms-input-placeholder {
        @content;
    }
    &::-webkit-input-placeholder {
        @content;
    }
}

//============================================================
// Truncate
//============================================================
@mixin truncate($truncation-boundary) {
    max-width: $truncation-boundary;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

//============================================================
// Positioning
/*
.menu li {
@include relative;
}
.sub-menu {
@include absolute(top 100% left 0);
}
.sticky-bar {
@include fixed(top 0 left 0);
}
*/
//============================================================
@mixin position($position, $args) {
    @each $o in top right bottom left {
        $i: index($args, $o);
        @if $i and
            $i +
            1 <=
            length($args) and
            type-of(nth($args, $i + 1)) ==
            number
        {
            #{$o}: nth($args, $i + 1);
        }
    }
    position: $position;
}

// Positioning helpers
@mixin absolute($args: "") {
    @include position(absolute, $args);
}

@mixin fixed($args: "") {
    @include position(fixed, $args);
}

@mixin relative($args: "") {
    @include position(relative, $args);
}

//============================================================
// Retina Images Mixin
/*
.logo {
background-image: url("img/logo.png");
@include retina("img/logo@2x.png", 100px, 21px);
}
*/
//============================================================
@mixin retina($image, $width, $height) {
    @media (min--moz-device-pixel-ratio: 1.3),
        (-o-min-device-pixel-ratio: 2.6/2),
        (-webkit-min-device-pixel-ratio: 1.3),
        (min-device-pixel-ratio: 1.3),
        (min-resolution: 1.3dppx) {
        /* Serving 2x image on Retina display */
        background-image: url($image);
        background-size: $width $height;
    }
}
